/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.paloit.client.petstore.feign.api;

import com.paloit.client.petstore.feign.model.Pet;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.parameters.RequestBody;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import java.util.List;
import javax.validation.Valid;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-01-19T16:06:11.051298+07:00[Asia/Bangkok]")
@Validated
@Tag(name = "Pet", description = "the Pet API")
public interface PetApi {

    /**
     * POST /pet : Add a new pet to the store
     * Add a new pet to the store
     *
     * @param pet Create a new pet in the store (required)
     * @return Successful operation (status code 200)
     *         or Invalid input (status code 405)
     */
    @Operation(summary = "Add a new pet to the store", tags={ "pet", }, responses = {  @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Pet.class))), @ApiResponse(responseCode = "405", description = "Invalid input") },security = {
        @SecurityRequirement(name = "petstore_auth", scopes={ "write:pets", "read:pets" }) } )
        @RequestMapping(
        method = RequestMethod.POST,
        value = "/pet",
        produces = "application/json",
        consumes = "application/json"
    )
    ResponseEntity<Pet> addPet(

@Parameter(name = "Create a new pet in the store", required = true )   @Valid @RequestBody Pet pet);


    /**
     * DELETE /pet/{petId} : Deletes a pet
     *
     * @param petId Pet id to delete (required)
     * @param apiKey  (optional)
     * @return Invalid pet value (status code 400)
     */
    @Operation(summary = "Deletes a pet", tags={ "pet", }, responses = {  @ApiResponse(responseCode = "400", description = "Invalid pet value") },security = {
        @SecurityRequirement(name = "petstore_auth", scopes={ "write:pets", "read:pets" }) } )
        @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/pet/{petId}"
    )
    ResponseEntity<Void> deletePet(@Parameter(name = "petId", description = "Pet id to delete", required = true) @PathVariable("petId") Long petId

,
@Parameter(description = "") @RequestHeader(value = "api_key", required = false) String apiKey
);


    /**
     * GET /pet/findByStatus : Finds Pets by status
     * Multiple status values can be provided with comma separated strings
     *
     * @param status Status values that need to be considered for filter (optional)
     * @return successful operation (status code 200)
     *         or Invalid status value (status code 400)
     */
    @Operation(summary = "Finds Pets by status", tags={ "pet", }, responses = {  @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Pet.class))), @ApiResponse(responseCode = "400", description = "Invalid status value") },security = {
        @SecurityRequirement(name = "petstore_auth", scopes={ "write:pets", "read:pets" }) } )
        @RequestMapping(
        method = RequestMethod.GET,
        value = "/pet/findByStatus",
        produces = "application/json"
    )
    ResponseEntity<List<Pet>> findPetsByStatus(@Parameter(name = "status", description = "Status values that need to be considered for filter", schema = @Schema(allowableValues = "available, pending, sold")) @Valid @RequestParam(value = "status", required = false) String status

);


    /**
     * GET /pet/findByTags : Finds Pets by tags
     * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
     *
     * @param tags Tags to filter by (optional)
     * @return successful operation (status code 200)
     *         or Invalid tag value (status code 400)
     */
    @Operation(summary = "Finds Pets by tags", tags={ "pet", }, responses = {  @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Pet.class))), @ApiResponse(responseCode = "400", description = "Invalid tag value") },security = {
        @SecurityRequirement(name = "petstore_auth", scopes={ "write:pets", "read:pets" }) } )
        @RequestMapping(
        method = RequestMethod.GET,
        value = "/pet/findByTags",
        produces = "application/json"
    )
    ResponseEntity<List<Pet>> findPetsByTags(@Parameter(name = "tags", description = "Tags to filter by") @Valid @RequestParam(value = "tags", required = false) List<String> tags

);


    /**
     * GET /pet/{petId} : Find pet by ID
     * Returns a single pet
     *
     * @param petId ID of pet to return (required)
     * @return successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Pet not found (status code 404)
     */
    @Operation(summary = "Find pet by ID", tags={ "pet", }, responses = {  @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Pet.class))), @ApiResponse(responseCode = "400", description = "Invalid ID supplied"), @ApiResponse(responseCode = "404", description = "Pet not found") },security = {
        @SecurityRequirement(name = "api_key"),@SecurityRequirement(name = "petstore_auth", scopes={ "write:pets", "read:pets" }) } )
        @RequestMapping(
        method = RequestMethod.GET,
        value = "/pet/{petId}",
        produces = "application/json"
    )
    ResponseEntity<Pet> getPetById(@Parameter(name = "petId", description = "ID of pet to return", required = true) @PathVariable("petId") Long petId

);


    /**
     * PUT /pet : Update an existing pet
     * Update an existing pet by Id
     *
     * @param pet Update an existent pet in the store (required)
     * @return Successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Pet not found (status code 404)
     *         or Validation exception (status code 405)
     */
    @Operation(summary = "Update an existing pet", tags={ "pet", }, responses = {  @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Pet.class))), @ApiResponse(responseCode = "400", description = "Invalid ID supplied"), @ApiResponse(responseCode = "404", description = "Pet not found"), @ApiResponse(responseCode = "405", description = "Validation exception") },security = {
        @SecurityRequirement(name = "petstore_auth", scopes={ "write:pets", "read:pets" }) } )
        @RequestMapping(
        method = RequestMethod.PUT,
        value = "/pet",
        produces = "application/json",
        consumes = "application/json"
    )
    ResponseEntity<Pet> updatePet(

@Parameter(name = "Update an existent pet in the store", required = true )   @Valid @RequestBody Pet pet);


    /**
     * POST /pet/{petId} : Updates a pet in the store with form data
     *
     * @param petId ID of pet that needs to be updated (required)
     * @param name Name of pet that needs to be updated (optional)
     * @param status Status of pet that needs to be updated (optional)
     * @return Invalid input (status code 405)
     */
    @Operation(summary = "Updates a pet in the store with form data", tags={ "pet", }, responses = {  @ApiResponse(responseCode = "405", description = "Invalid input") },security = {
        @SecurityRequirement(name = "petstore_auth", scopes={ "write:pets", "read:pets" }) } )
        @RequestMapping(
        method = RequestMethod.POST,
        value = "/pet/{petId}"
    )
    ResponseEntity<Void> updatePetWithForm(@Parameter(name = "petId", description = "ID of pet that needs to be updated", required = true) @PathVariable("petId") Long petId

,@Parameter(name = "name", description = "Name of pet that needs to be updated") @Valid @RequestParam(value = "name", required = false) String name

,@Parameter(name = "status", description = "Status of pet that needs to be updated") @Valid @RequestParam(value = "status", required = false) String status

);

}
