/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.paloit.client.petstore.feign.api;

import com.paloit.client.petstore.feign.model.Order;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.parameters.RequestBody;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import java.util.Map;
import javax.validation.Valid;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-01-19T16:06:11.051298+07:00[Asia/Bangkok]")
@Validated
@Tag(name = "Store", description = "the Store API")
public interface StoreApi {

    /**
     * DELETE /store/order/{orderId} : Delete purchase order by ID
     * For valid response try integer IDs with value &lt; 1000. Anything above 1000 or nonintegers will generate API errors
     *
     * @param orderId ID of the order that needs to be deleted (required)
     * @return Invalid ID supplied (status code 400)
     *         or Order not found (status code 404)
     */
    @Operation(summary = "Delete purchase order by ID", tags={ "store", }, responses = {  @ApiResponse(responseCode = "400", description = "Invalid ID supplied"), @ApiResponse(responseCode = "404", description = "Order not found") })
        @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/store/order/{orderId}"
    )
    ResponseEntity<Void> deleteOrder(@Parameter(name = "orderId", description = "ID of the order that needs to be deleted", required = true) @PathVariable("orderId") Long orderId

);


    /**
     * GET /store/inventory : Returns pet inventories by status
     * Returns a map of status codes to quantities
     *
     * @return successful operation (status code 200)
     */
    @Operation(summary = "Returns pet inventories by status", tags={ "store", }, responses = {  @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Map.class))) },security = {
        @SecurityRequirement(name = "api_key") } )
        @RequestMapping(
        method = RequestMethod.GET,
        value = "/store/inventory",
        produces = "application/json"
    )
    ResponseEntity<Map<String, Integer>> getInventory();


    /**
     * GET /store/order/{orderId} : Find purchase order by ID
     * For valid response try integer IDs with value &lt;&#x3D; 5 or &gt; 10. Other values will generate exceptions.
     *
     * @param orderId ID of order that needs to be fetched (required)
     * @return successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Order not found (status code 404)
     */
    @Operation(summary = "Find purchase order by ID", tags={ "store", }, responses = {  @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Order.class))), @ApiResponse(responseCode = "400", description = "Invalid ID supplied"), @ApiResponse(responseCode = "404", description = "Order not found") })
        @RequestMapping(
        method = RequestMethod.GET,
        value = "/store/order/{orderId}",
        produces = "application/json"
    )
    ResponseEntity<Order> getOrderById(@Parameter(name = "orderId", description = "ID of order that needs to be fetched", required = true) @PathVariable("orderId") Long orderId

);


    /**
     * POST /store/order : Place an order for a pet
     * Place a new order in the store
     *
     * @param order  (optional)
     * @return successful operation (status code 200)
     *         or Invalid input (status code 405)
     */
    @Operation(summary = "Place an order for a pet", tags={ "store", }, responses = {  @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Order.class))), @ApiResponse(responseCode = "405", description = "Invalid input") })
        @RequestMapping(
        method = RequestMethod.POST,
        value = "/store/order",
        produces = "application/json",
        consumes = "application/json"
    )
    ResponseEntity<Order> placeOrder(

@Parameter(name = "" )   @Valid @RequestBody(required = false) Order order);

}
